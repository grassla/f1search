import org.jlab.jnp.hipo4.io.*; 
import org.jlab.jnp.hipo4.data.*;
import org.jlab.groot.data.*;
import org.jlab.groot.graphics.*;
import org.jlab.groot.math.*;
import org.jlab.groot.ui.*;
import org.jlab.clas.physics.*;
import org.jlab.clas.physics.LorentzVector;
import org.jlab.clas.physics.PhysicsEvent;
import org.jlab.clas.physics.Particle;
import org.jlab.clas.physics.EventFilter;

HipoReader reader = new HipoReader(); 
reader.open("coatjava/bin/SimOuts.hipo"); 
 
Event     event = new Event(); 
Bank  particles = new Bank(reader.getSchemaFactory().getSchema("REC::Particle"));

EventFilter  eventFilter = new EventFilter("11:211:211:-211:-211:X+:X-:Xn");

reader.getEvent(event,0); 
int filterCounter = 0;
int eventCounter  = 0;

// H1F    hf1 = new H1F("hf1"   ,100,0.05, 0.28); //  WHAT ARE THESE NUMBERS
// H1F hf1vec = new H1F("hf1vec",100,0.05, 0.28); // WHAT ARE THESE NUMBERS 
  
while(reader.hasNext()==true){
      
     reader.nextEvent(event); // read the event object
     event.read(particles);   // read particles bank from the event
     
     // Data manages creates a physics event with beam energy 10.6 GeV
     // and from particles bank for reconstructed particles info
     PhysicsEvent physEvent = DataManager.getPhysicsEvent(10.6,particles);
     
     // check if event passes the filter 
     if(eventFilter.isValid(physEvent)==true){
         filterCounter++;
         
         // The particle Lorentz vector is constructed by adding
         // two photons lorentz vectors 
         // [22,0] - first photons (or 0'th)
         // [22,1] - second photons (or index 1)
         // Particle f1 = physEvent.getParticle("[22,0]+[22,1]"); // ADD DIFFERENT THINGS
         hf1.fill(f1.mass());
         
         
         
         
         // This is another way that invariant mass can be calculated
         // Get particles one by one, and add their lorentz vectors
         // Particle gamma0 = physEvent.getParticleByPid(22,0); // DIFFERENT PARTICLES
         // Particle gamma1 = physEvent.getParticleByPid(22,1); // DIFFERENT PARTICLES
         // LorentzVector vL_f1 = LorentzVector.from(gamma0.vector()); // DIFFERENT PARTICLES
         // vL_pi0.add(gamma1.vector()); // DIFFERENT PARTICLES
         hf1vec.fill(vL_f1.mass());
     }
     eventCounter++;
}
System.out.println("analyzed " + eventCounter + " events. # passed filter = " + filterCounter);




// Create the canvas with 2? MAYBE MORE pads and draw the histograms
TCanvas ec = new TCanvas(“ec”,800,400);
 
  
// hpi0.setTitleX("M(#gamma#gamma) [GeV]"); DIFFERENT PARTICLES
hf1.setTitleY("Counts");
// hpi0vec.setTitleX("M(#gamma#gamma) [GeV]"); DIFFERENT PARTICLES
hf1vec.setTitleY("Counts"); 
 
ec.divide(2,1); 
ec.cd(0).draw(hf1);
ec.cd(1).draw(hf1vec);

// in progress
