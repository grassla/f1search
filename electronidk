import org.jlab.jnp.hipo4.io.*;
import org.jlab.jnp.hipo4.data.*;
import org.jlab.groot.data.*;
import org.jlab.groot.graphics.*;
import org.jlab.groot.math.*;
import org.jlab.groot.ui.*;
import org.jlab.clas.physics.*;
import org.jlab.clas.physics.LorentzVector;
import org.jlab.clas.physics.PhysicsEvent;
import org.jlab.clas.physics.Particle;
import org.jlab.clas.physics.EventFilter;

HipoReader reader = new HipoReader();
reader.open("coatjava/bin/SimOuts.hipo");

SchemaFactory factory = reader.getSchemaFactory();
factory.show();
Bank particles = new Bank(factory.getSchema("MC::Lund"));
Event     event = new Event();
reader.getEvent(event,0);


H1F    hposvneg = new H1F("versus"   ,200,0, 1);
H1F    homegaparent = new H1F("homegaparent"  ,200,0.00, 1.00);
H1F    hetaparent = new H1F("hetaparent"  ,200,0.00, 1.00);

int counter = 0;
int i = 0;
int j = 0;
int onegamma = 0;
int twogamma = 0;
int elec = 0;

LorentzVector  vBeam   = new LorentzVector(0.0,0.0,10.6,10.6);
LorentzVector  vTarget = new LorentzVector(0.0,0.0,0.0,0.938);
LorentzVector velectron = new LorentzVector();
LorentzVector  vversus  = new LorentzVector();
LorentzVector  vonegamma = new LorentzVector();
LorentzVector  vtwogamma  = new LorentzVector();

List<Integer> onegammaList = new ArrayList<>();
List<Integer> twogammaList = new ArrayList<>();

while(reader.hasNext()==true){
      pospionList.clear();
      negpionList.clear();
      reader.nextEvent(event);
      event.read(particles);
      if(particles.getRows()>4){ 
          for(int row = 0; row < particles.getRows(); row++){
              int pid = particles.getInt("pid",row);
              
              if(pid==22) {
                onegamma++;              
                onegammaList.add(row);
              }
              if(pid==22) {
                twogamma++;
                twogammaList.add(row);
              }
              if(pid==11) {
                elec++;
              }
            }
            for(i=0; i<onegammaList.size(); i++) {
              for(j=0; j<twogammaList.size(); j++) {
                byte onegammaparent = particles.getByte("parent",onegammaList.get(i));
                byte twogammaparent = particles.getByte("parent",twogammaList.get(j));
                int onegammaparentpid = particles.getInt("pid",onegammaparent-1);
                int twogammaparentpid = particles.getInt("pid",twogammaparent-1);
                
                if(onegammaparent==twogammaparent) {
                  hpairsparent.fill(onegammaparent);
                  int parentpid = particles.getInt("pid",onegammaparent-1);            
                  Byte grandparent = particles.getByte("parent",onegammaparent-1);
                  int grandparentpid = particles.getInt("pid",grandparent-1);
                      
                  vonegamma.setPxPyPzM(
                  particles.getFloat("px",onegammaList.get(i)), 
                  particles.getFloat("py",onegammaList.get(i)),
                  particles.getFloat("pz",onegammaList.get(i)),
                  0.1396
                  );
                      
                  vtwogamma.setPxPyPzM(
                  particles.getFloat("px",twogammaList.get(j)), 
                  particles.getFloat("py",twogammaList.get(j)),
                  particles.getFloat("pz",twogammaList.get(j)),
                  0.1396
                  );                           
                  
                  
                  vversus.copy(vonegamma);
                  vversus.add(vtwogamma);
                  hposvneg.fill(vversus.mass());
                 
                 if(parentpid==221) {
                        hetaparent.fill(vversus.mass());
                  } else if(parentpid==223) {
                        homegaparent.fill(vversus.mass());
                  }
                }
              }
            }
       }
}
homegaparent.setTitleX("omega parent");
homegaparent.setTitleY("Count");
hetaparent.setTitleX("eta parent");
hetaparent.setTitleY("Count"
TCanvas ec = new TCanvas("ec",1200,800);
ec.divide(3,1);
ec.cd(0).draw(hversus);
ec.cd(1).draw(homegaparent);
ec.cd(2).draw(hetaparent);
