

import org.jlab.jnp.hipo4.io.*;
import org.jlab.jnp.hipo4.data.*;
import org.jlab.groot.data.*;
import org.jlab.groot.graphics.*;
import org.jlab.groot.math.*;
import org.jlab.groot.ui.*;
import org.jlab.clas.physics.*;
import org.jlab.clas.physics.LorentzVector;
import org.jlab.clas.physics.PhysicsEvent;
import org.jlab.clas.physics.Particle;
import org.jlab.clas.physics.EventFilter;


H1F    hpairsparent = new H1F("hpairsparent"   ,4000,-4000, 2500);

int counter = 0;
int pidcounter = 0;
int matches = 0; 
int nineonecounter = 0;
int ninetwocounter = 0;
int omegacounter = 0;
int rhozerocounter = 0;
int etaprimecounter = 0;
int Kzeroshortcounter = 0;
int etacounter = 0;
int phicounter = 0;
int othercounter = 0;

HipoReader reader = new HipoReader();
reader.open("coatjava/bin/SimOuts.hipo");

SchemaFactory factory = reader.getSchemaFactory();
factory.show();
Bank particles = new Bank(factory.getSchema("MC::Lund"));
Event     event = new Event();
reader.getEvent(event,0);

int counter = 0;
int i = 0;
int j = 0;
int pospion = 0;
int negpion = 0;

List<Integer> pospionList = new ArrayList<>();
List<Integer> negpionList = new ArrayList<>();
while(reader.hasNext()==true){
      pospionList.clear();
      negpionList.clear();
      reader.nextEvent(event);
      event.read(particles);
      if(particles.getRows()>4){ 
          for(int row = 0; row < particles.getRows(); row++){
              int pid = particles.getInt("pid",row);
              
              if(pid==211) {
                pospion++;              
                pospionList.add(row);
              }
              if(pid==-211) {
                negpion++;
                negpionList.add(row);
              }
            }

            for(i=0; i<pospionList.size(); i++) {
              for(j=0; j<negpionList.size(); j++) {
                byte pospionparent = particles.getByte("parent",pospionList.get(i));
                byte negpionparent = particles.getByte("parent",negpionList.get(j));
                int posparentpid = particles.getInt("pid",pospionparent-1);
                int negparentpid = particles.getInt("pid",negpionparent-1);

                
                if(pospionparent==negpionparent) {
                  hpairsparent.fill(posparentpid);
                  if(posparentpid==92) {
                    ninetwocounter++; }
                  else if(posparentpid==91) {
                    nineonecounter++; }
                  else if(posparentpid==223) {
                    omegacounter++; }
                  else if(posparentpid==113) {
                    rhozerocounter++; }
                  else if(posparentpid==331) {
                    etaprimecounter++; }
                  else if(posparentpid==310) {
                    Kzeroshortcounter++; }
                  else if(posparentpid==221) {
                    etacounter++; }
                  else if(posparentpid==333) {
                    phicounter++; }
                  else {
                    System.out.println(posparentpid);
                    othercounter++; }
                    
                    
                    
              }
              }
              } 
           }
       }
  
  

System.out.println("91 " + nineonecounter);
System.out.println("92 " + ninetwocounter);
System.out.println("113 (#Rho0) " + rhozerocounter);
System.out.println("221 (#Eta) " + etacounter);
System.out.println("223 (#Omega) " + omegacounter);
System.out.println("310 (K0 short) " + Kzeroshortcounter);
System.out.println("331 (#Eta') " + etaprimecounter);
System.out.println("333 (#Phi) " + phicounter);
System.out.println("Other parents " + othercounter);


TCanvas ec = new TCanvas("ec",1600,1200);
hpairsparent.setTitleX("pairs parent pid");
hpairsparent.setTitleY("Count");
ec.cd(0).draw(hpairsparent);
