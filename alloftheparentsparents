import org.jlab.jnp.hipo4.io.*;
import org.jlab.jnp.hipo4.data.*;
import org.jlab.groot.data.*;
import org.jlab.groot.graphics.*;
import org.jlab.groot.math.*;
import org.jlab.groot.ui.*;
import org.jlab.clas.physics.*;
import org.jlab.clas.physics.LorentzVector;
import org.jlab.clas.physics.PhysicsEvent;
import org.jlab.clas.physics.Particle;
import org.jlab.clas.physics.EventFilter;

HipoReader reader = new HipoReader();
reader.open("coatjava/bin/SimOuts.hipo");

SchemaFactory factory = reader.getSchemaFactory();
factory.show();
Bank particles = new Bank(factory.getSchema("MC::Lund"));
Event     event = new Event();
reader.getEvent(event,0);


H1F    hpairsparent = new H1F("hpairsparent"   ,40,0, 25);
H1F    hrhoparent = new H1F("hrhoparent"  ,10,0, 250);
H1F    hkzeroshortparent = new H1F("hkzeroshortparent"  ,10,0, 250);
H1F    hrhograndparent = new H1F("hrhograndparent"  ,10,0, 250);
H1F    homegaparent = new H1F("homegaparent"  ,10,0, 250);
H1F    hetaparent = new H1F("hetaparent"  ,10,0, 250);
H1F    hkzeroshortgrandparent = new H1F("hkzeroshortgrandparent"  ,10,0, 250);


int counter = 0;
int i = 0;
int j = 0;
int pospion = 0;
int negpion = 0;
int ninetwo = 0;
int onethirteen = 0;
int threeten = 0;
int twotwothree = 0;
int twotwoone = 0;
int other = 0;
int Goodnews = 0;

List<Integer> pospionList = new ArrayList<>();
List<Integer> negpionList = new ArrayList<>();

while(reader.hasNext()==true){
      pospionList.clear();
      negpionList.clear();
      reader.nextEvent(event);
      event.read(particles);
      if(particles.getRows()>4){ 
          for(int row = 0; row < particles.getRows(); row++){
              int pid = particles.getInt("pid",row);
              
              if(pid==211) {
                pospion++;              
                pospionList.add(row);
              }
              if(pid==-211) {
                negpion++;
                negpionList.add(row);
              }
            }
            for(i=0; i<pospionList.size(); i++) {
              for(j=0; j<negpionList.size(); j++) {
                byte pospionparent = particles.getByte("parent",pospionList.get(i));
                byte negpionparent = particles.getByte("parent",negpionList.get(j));
                int posparentpid = particles.getInt("pid",pospionparent-1);
                int negparentpid = particles.getInt("pid",negpionparent-1);
                
                if(pospionparent==negpionparent) {
                  hpairsparent.fill(pospionparent);
                  int parentpid = particles.getInt("pid",pospionparent-1);            
                  Byte grandparent = particles.getByte("parent",pospionparent-1);
                  int grandparentpid = particles.getInt("pid",grandparent-1);
                  Byte greatgrandparent = particles.getByte("parent",grandparent-1);
                  int greatgrandparentpid = particles.getInt("pid",greatgrandparent-1);
                  if(parentpid==92) {
                        ninetwo++; 
                  } else if(parentpid==20223) {
                        Goodnews++;
                  } else if(parentpid==113) {
                        hrhoparent.fill(grandparentpid);
                        onethirteen++;
                        System.out.println("Rho parent: " + grandparentpid);
                        System.out.println(" ");
                        System.out.println("Rho grandparent: " + greatgrandparentpid);
                        hrhograndparent.fill(greatgrandparentpid);
                        if(grandparentpid==20223) {
                              Goodnews++;                              
                        }
                  } else if(parentpid==223) {
                        homegaparent.fill(grandparentpid);
                        twotwothree++;
                        System.out.println("Omega parent: " + grandparentpid);
                        System.out.println(" ");    
                  } else if(parentpid==221) {
                        hetaparent.fill(grandparentpid);
                        twotwoone++;
                        System.out.println("Eta parent: " + grandparentpid);
                        System.out.println(" ");                        
                  } else if(parentpid==310) {
                        hkzeroshortparent.fill(grandparentpid);
                        threeten++;
                        System.out.println("K ZeroShort parent: " + grandparentpid);
                        System.out.println(" ");
                        System.out.println("K ZeroShort grandparent: " + greatgrandparentpid);
                        hkzeroshortgrandparent.fill(greatgrandparentpid);
                        if(grandparentpid==20223) {
                              Goodnews++;                              
                        }
                  }
                  else {
                        // System.out.println(parentpid);
                        other++; 
                        }
                }
              }
            }
       }
}
System.out.println("Pion pair parents: ");
System.out.println("92: " + ninetwo);
System.out.println("113 (rho): " + onethirteen);
System.out.println("310 (kzeroshort): " + threeten);
System.out.println("223 (omega): " + twotwothree);
System.out.println("221 (eta): " + twotwoone);
System.out.println("Other: " + other);
System.out.println("F1 " + Goodnews);

TCanvas ec = new TCanvas("ec",1200,800);
hpairsparent.setTitleX("pairs parent pid");
hpairsparent.setTitleY("Count");
hrhoparent.setTitleX("rho parent pid");
hrhoparent.setTitleY("Count");
homegaparent.setTitleX("omega parent pid");
homegaparent.setTitleY("Count");
hetaparent.setTitleX("eta parent pid");
hetaparent.setTitleY("Count");
hkzeroshortparent.setTitleX("K zeroshort parent pid");
hkzeroshortparent.setTitleY("Count");
hrhograndparent.setTitleX("rho grandparent pid");
hrhograndparent.setTitleY("Count");
hkzeroshortgrandparent.setTitleX("kzeroshort grandparent pid");
hkzeroshortgrandparent.setTitleY("Count");
ec.divide(3,3);
ec.cd(0).draw(hpairsparent);
ec.cd(1).draw(hrhoparent);
ec.cd(2).draw(hkzeroshortparent);
ec.cd(3).draw(homegaparent);
ec.cd(4).draw(hetaparent);
ec.cd(5).draw(hrhograndparent);
ec.cd(6).draw(hkzeroshortgrandparent);
